---
import BaseLayout from '../layouts/BaseLayout.astro'
import Button from '../components/icons/Button.astro';
import { getCollection } from 'astro:content';

const works = await getCollection('works')
let filteredWorks = works.slice(0,4)
const sortedWorks = filteredWorks.sort((a,b) => {
    let c = new Date(a.data.date)
    let d = new Date(b.data.date)

    return c<d ? 1 : -1;
});
---

<BaseLayout>
    <main class="font-sans text-[#17191C] px-4 mbl-lg:px-10 tbl:px-10 lpt-lg:px-20 tbl:mt-0">
        <section class="justify-center relative flex gap-x-30 w-full min-h-[60vh] tbl:min-h-[95vh] items-center">
            <!-- <a href="#" class="z-[100]"> -->
            <div class="z-[100]">
                <img src="/assets/logo-gearlike.png" width="560rem" alt="9petal" class="flex-[3] block overflow-x-hidden">
            </div>
            <!-- </a> -->
            <div data-speed="slow" class="scroller z-[1] absolute flex flex-row gap-10 w-full overflow-hidden whitespace-nowrap">
                <div class="scroller__inner flex flex-row gap-10 lg:text-5xl sm:text-4xl text-2xl font-bold text">
                    <span>Developer. Engineer.</span>
                    <span>Developer. Engineer.</span>
                    <span>Developer. Engineer.</span>
                </div>
            </div>
            <a href="#works" class="absolute bottom-0 flex items-center"> <span class="material-symbols-rounded animate-bounce">arrow_downward</span> Scroll Down</a>
        </section>
        <section id="" class="my-10 pt-10">
        </section>
        <section id="works" class="my-10 pt-10">
            <div>
                <h4 class="font-bold text-2xl mb-4">Works & Projects</h4>
                <span class="flex items-center text-lg gap-x-2 italic"><Button/> Learning from doing</span>
            </div>
            <div class="mt-10 max-w-5xl flex flex-col gap-y-8">
                {sortedWorks.map((work, i) => (
                    <a href={`/work/${work.slug}`} class="flex flex-col justify-center">
                        <div class="flex items-center gap-5">
                            <span class="text-sm"> 0{i+1} </span>
                            <div>
                                <h1 class="hover:underline text-4xl font-semibold mb-2">{work.data.title}</h1>
                                <p>{work.data.description}</p>
                            </div>
                        </div>
                    </a>
                ))}
            <hr>
            </div>
            <div class="mt-8">
                <div class="px-6 italic">There are more!</div>
                <a href="/works/1" class="flex items-center gap-4 font-bold text-3xl px-6 text-l-pr-50">
                    <span class="hover:underline "> view all works </span>
                    <span class="material-symbols-rounded">arrow_forward</span>
                </a>
            </div>
        </section>
    </main>
</BaseLayout>

<style>
.scroller__inner {
  /* padding-block: 1rem; */
  display: flex;
  flex-wrap: wrap;
  /* gap: 1rem; */
}

.scroller[data-animated="true"] {
  overflow: hidden;
  -webkit-mask: linear-gradient(
    90deg,
    transparent,
    white 20%,
    white 80%,
    transparent
  );
  mask: linear-gradient(90deg, transparent, white 20%, white 80%, transparent);
}

.scroller[data-animated="true"] .scroller__inner {
  flex-wrap: nowrap;
  animation: scroll var(--_animation-duration, 40s)
    var(--_animation-direction, forwards) linear infinite;
}

.scroller[data-direction="right"] {
  --_animation-direction: reverse;
}

.scroller[data-direction="left"] {
  --_animation-direction: forwards;
}

.scroller[data-speed="faster"] {
  --_animation-duration: 10s;
}

.scroller[data-speed="fast"] {
  --_animation-duration: 20s;
}

.scroller[data-speed="slow"] {
  --_animation-duration: 60s;
}

@keyframes scroll {
  to {
    transform: translate(calc(-50% - 0.5rem));
  }
}

</style>

<script>
    const scrollers = document.querySelectorAll(".scroller");

// If a user hasn't opted in for recuded motion, then we add the animation
if (!window.matchMedia("(prefers-reduced-motion: reduce)").matches) {
  addAnimation();
}

function addAnimation() {
  scrollers.forEach((scroller) => {
    // add data-animated="true" to every `.scroller` on the page
    scroller.setAttribute("data-animated", true);

    // Make an array from the elements within `.scroller-inner`
    const scrollerInner = scroller.querySelector(".scroller__inner");
    const scrollerContent = Array.from(scrollerInner.children);

    // For each item in the array, clone it
    // add aria-hidden to it
    // add it into the `.scroller-inner`
    scrollerContent.forEach((item) => {
      const duplicatedItem = item.cloneNode(true);
      duplicatedItem.setAttribute("aria-hidden", true);
      scrollerInner.appendChild(duplicatedItem);
    });
  });
}

</script>